package charles.nocompany.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import charles.nocompany.greendao.TestTable1;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_TABLE1".
*/
public class TestTable1Dao extends AbstractDao<TestTable1, Long> {

    public static final String TABLENAME = "TEST_TABLE1";

    /**
     * Properties of entity TestTable1.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Text1 = new Property(1, String.class, "text1", false, "TEXT1");
        public final static Property Comment1 = new Property(2, String.class, "comment1", false, "COMMENT1");
        public final static Property Date1 = new Property(3, java.util.Date.class, "date1", false, "DATE1");
    };


    public TestTable1Dao(DaoConfig config) {
        super(config);
    }
    
    public TestTable1Dao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_TABLE1\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TEXT1\" TEXT NOT NULL ," + // 1: text1
                "\"COMMENT1\" TEXT," + // 2: comment1
                "\"DATE1\" INTEGER);"); // 3: date1
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_TABLE1\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, TestTable1 entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getText1());
 
        String comment1 = entity.getComment1();
        if (comment1 != null) {
            stmt.bindString(3, comment1);
        }
 
        java.util.Date date1 = entity.getDate1();
        if (date1 != null) {
            stmt.bindLong(4, date1.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public TestTable1 readEntity(Cursor cursor, int offset) {
        TestTable1 entity = new TestTable1( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // text1
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // comment1
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)) // date1
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, TestTable1 entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setText1(cursor.getString(offset + 1));
        entity.setComment1(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDate1(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(TestTable1 entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(TestTable1 entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
